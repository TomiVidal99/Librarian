import {
  app,
  BrowserWindow,
  dialog,
  ipcMain,
  IpcMainEvent,
  Notification,
} from "electron";
import { IDestinationFolder, IPC_CALLS } from "./models";
import Store from "electron-store";
import { getState, saveState } from "./utils";
import { IGlobalState } from "./state";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const FILTERS_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const store = new Store();

let mainWindow: BrowserWindow;
let filtersWindow: BrowserWindow;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createSettingsWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // loads the saved state
  mainWindow.on("ready-to-show", () => {
    mainWindow.webContents.send(IPC_CALLS.GET_STATE_FROM_MAIN, getState(store));
  });
};

const createFiltersWindow = (): void => {
  // Create the browser window.
  filtersWindow = new BrowserWindow({
    height: 600,
    width: 200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  filtersWindow.loadURL(FILTERS_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  filtersWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createSettingsWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createSettingsWindow();
  }
});

// Create the settings window when the user clicks the add destination folder button
ipcMain.on(IPC_CALLS.OPEN_FILTERS_WINDOW, () => {
  console.log("Should open the filters window");
  createFiltersWindow();
});

// Open folders
ipcMain.handle(
  IPC_CALLS.OPEN_FOLDERS_DIALOG,
  async (
    event: IpcMainEvent,
    multiSelection: boolean
    // callback: (arg0: string[]) => void,
    // multiSelection: boolean
  ) => {
    const dir = await dialog.showOpenDialog({
      properties: ["openDirectory", multiSelection ? "multiSelections" : null],
    });
    const dirPath = dir.filePaths;
    return dirPath;
  }
);

// opens a window with a warning message
ipcMain.on(
  IPC_CALLS.POP_WARNING_MESSAGE,
  (event: IpcMainEvent, data: { title: string; body: string }) => {
    const not = new Notification({ title: data.title, body: data.body });
    not.show();
  }
);

// sends a new destination folder from the filters window to the main window
ipcMain.on(
  IPC_CALLS.SEND_FOLDER_FROM_FILTERS_WINDOW,
  (event: IpcMainEvent, folder: IDestinationFolder) => {
    mainWindow.webContents.send(IPC_CALLS.RECIEVE_FOLDER_FROM_MAIN, folder);
  }
);

// gets the new updated state from the settings window
ipcMain.on(
  IPC_CALLS.SEND_STATE_FROM_SETTINGS_TO_MAIN,
  (event: IpcMainEvent, state: IGlobalState) => {
    saveState(store, state);
  }
);
